<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software-testing | DATA ZOO]]></title>
  <link href="http://martingross.github.io/blog/categories/software-testing/atom.xml" rel="self"/>
  <link href="http://martingross.github.io/"/>
  <updated>2014-03-19T01:14:58+01:00</updated>
  <id>http://martingross.github.io/</id>
  <author>
    <name><![CDATA[Martin Gross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing web apps with Selenium Page Objects]]></title>
    <link href="http://martingross.github.io/articles/184/testing-web-apps-with-selenium-page-objects"/>
    <updated>2012-09-04T17:59:56+02:00</updated>
    <id>http://martingross.github.io/articles/184/testing-web-apps-with-selenium-page-objects</id>
    <content type="html"><![CDATA[<p>Why?</p>

<p>During the process of developing a web application, the structure of web pages often changes. If you have several "Selenium":http://code.google.com/p/selenium/ tests that test different functionalities of one page, you don't want to change all your tests if the page changes only its layout.</p>

<p>Let say you have twelve tests which access the page. Now you need to change the page to display an additional table row. Your selenium test would probably fail, because the expected data is now at a different place on the page.</p>

<p>The solution: Use abstractions!</p>

<p>Your tests should not access the page structure itself but use abstractions of the page. This means you would only need to adapt the abstraction of the page and the twelve tests wouldn't need any modification.</p>

<p>"Page objects":http://code.google.com/p/selenium/wiki/PageObjects should be the only thing that have a deep knowledge of the structure of the HTML of a page. Think of the methods on a Page Object as offering the "services" that a page offers rather than exposing the HTML strucure of the web page.</p>

<p>From the "Page objects":http://code.google.com/p/selenium/wiki/PageObjects page:
??As an example, think of the inbox of any web-based email system. Amongst the services that it offers are typically the ability to compose a new email, to choose to read a single email, and to list the subject lines of the emails in the inbox. How these are implemented shouldn't matter to the test.??</p>

<p>If your programming in Ruby you might want to use "page-object":https://github.com/cheezy/page-object . page-object is a "simple ruby gem that assists in creating flexible page objects":http://www.cheezyworld.com/2011/07/29/introducing-page-object-gem/ for testing browser based applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocks in Java]]></title>
    <link href="http://martingross.github.io/articles/183/mocks-in-java"/>
    <updated>2012-09-04T12:26:17+02:00</updated>
    <id>http://martingross.github.io/articles/183/mocks-in-java</id>
    <content type="html"><![CDATA[<p>"Mock objects":http://en.wikipedia.org/wiki/Mock_object are simulated objects that mimic the behavior of real objects in controlled ways.</p>

<p>"Mockito":http://code.google.com/p/mockito/ is my favourite mocking framework for Java for writing mock objects usable by unit tests.</p>

<p>Here is an example:</p>

<script src="https://gist.github.com/3619937.js?file=gistfile1.java"></script>


<p>But sometimes you need to mock something which Mockito can't handle.</p>

<p>"PowerMock":http://code.google.com/p/powermock/ is an extension to Mocking frameworks like Mockito. It extends these frameworks to mock things like static methods or constructors.</p>

<p>The PowerMock website has a good page explaining "how to use PowerMock with Mockito":http://code.google.com/p/powermock/wiki/MockitoUsage13 .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why does Test Driven Development matter?]]></title>
    <link href="http://martingross.github.io/articles/177/tdd"/>
    <updated>2011-06-18T13:50:18+02:00</updated>
    <id>http://martingross.github.io/articles/177/tdd</id>
    <content type="html"><![CDATA[<p>An excellent Talk by Robert Martin called "What Killed Smalltalk Could Kill Ruby, Too" that shows why test driven development (TDD) as a concept is so important, not only for Ruby projects but for every software project.</p>

<p>The TDD relevant part starts at "23m 56s":http://youtu.be/YX3iRjKj7C0?t=23m56s .</p>

<iframe width="560" height="349" src="http://www.youtube.com/embed/YX3iRjKj7C0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Performance Testing: The Analysis part]]></title>
    <link href="http://martingross.github.io/articles/156/software-performance-testing-the-analysis-part"/>
    <updated>2010-04-06T17:44:49+02:00</updated>
    <id>http://martingross.github.io/articles/156/software-performance-testing-the-analysis-part</id>
    <content type="html"><![CDATA[<p>After the "performance test":http://en.wikipedia.org/wiki/Software_performance_testing is done the analysis part starts. To get a really deep understanding of the test results you can't continue without analyzing the log files.</p>

<p>Hopefully you have all the data you need in the log files. Ususally this means you should set the log level on DEBUG or similar. The problem with the log files is that they can get easily very big. A few hundred MByte are not uncommon. Manually analyzing very large log files is not feasible.</p>

<p>This doesn't mean you should not inspect your log files manually. Far from it: Open the log files in your favorite editor and have a glance what you see in there. Any errors, exceptions or other useful information? This might give a hint what was going on in your tested application.</p>

<p>As soon as you know what you want to analyze further: grep is the next tool. Counting occurrences of errors is easy.</p>

<p>@grep -c "Exception" application.log@</p>
]]></content>
  </entry>
  
</feed>
